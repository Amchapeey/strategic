#!/usr/bin/env python3
# encoding: utf-8

import socket
import threading
import select
import sys
import time

# Configuration
IP = '0.0.0.0'

try:
    PORT = int(sys.argv[1])
except IndexError:
    PORT = 10015

PASS = ''
BUFLEN = 8196 * 8
TIMEOUT = 60
STYL = '<p style="text-align:center;">'
MSG = '<b>WEBSOCKET BY CHAPEEY'
COR = '<font color="#30e528">'
BIG = '<big>'
FTAG = '</big></font>'
NTAG = '</p>'
DEFAULT_HOSTS = ['0.0.0.0:143', '0.0.0.0:22', '0.0.0.0:80', '0.0.0.0:443']
RESPONSE = f"HTTP/1.1 101 {STYL}{COR}{BIG}{MSG}{FTAG}{NTAG}\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-WebSocket-Accept: foo\r\n\r\n"


class Server(threading.Thread):
    def __init__(self, host, port):
        super().__init__()
        self.running = False
        self.host = host
        self.port = port
        self.threads = []
        self.threadsLock = threading.Lock()

    def run(self):
        self.soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.soc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.soc.settimeout(2)
        try:
            self.soc.bind((self.host, self.port))
        except OSError as e:
            if e.errno == 98:
                print(f"Port {self.port} is already in use.")
                return
            else:
                raise e

        self.soc.listen(5)
        self.running = True
        print(f"Server running on {self.host}:{self.port}")

        try:
            while self.running:
                try:
                    c, addr = self.soc.accept()
                    c.setblocking(1)
                except socket.timeout:
                    continue

                conn = ConnectionHandler(c, self, addr)
                conn.start()
                self.addConn(conn)
        finally:
            self.running = False
            self.soc.close()

    def addConn(self, conn):
        with self.threadsLock:
            if self.running:
                self.threads.append(conn)

    def removeConn(self, conn):
        with self.threadsLock:
            self.threads.remove(conn)

    def close(self):
        self.running = False
        with self.threadsLock:
            for c in self.threads:
                c.close()


class ConnectionHandler(threading.Thread):
    def __init__(self, socClient, server, addr):
        super().__init__()
        self.clientClosed = False
        self.targetClosed = True
        self.client = socClient
        self.client_buffer = b''
        self.server = server

    def close(self):
        if not self.clientClosed:
            try:
                self.client.shutdown(socket.SHUT_RDWR)
                self.client.close()
            except:
                pass
            self.clientClosed = True

        if not self.targetClosed:
            try:
                self.target.shutdown(socket.SHUT_RDWR)
                self.target.close()
            except:
                pass
            self.targetClosed = True

    def run(self):
        try:
            self.client_buffer = self.client.recv(BUFLEN)
            hostPort = self.findHeader(self.client_buffer.decode(), 'X-Real-Host')

            if not hostPort:
                hostPort = None  # Ensures we fall back to DEFAULT_HOSTS

            split = self.findHeader(self.client_buffer.decode(), 'X-Split')

            if split:
                self.client.recv(BUFLEN)

            self.method_CONNECT(hostPort)

        except Exception as e:
            print(f"Error: {e}")
        finally:
            self.close()
            self.server.removeConn(self)

    def findHeader(self, head, header):
        index = head.find(f"{header}: ")
        if index == -1:
            return ""

        head = head[index + len(header) + 2:]
        end = head.find("\r\n")

        return head[:end] if end != -1 else ""

    def connect_target(self, host):
        if ":" in host:
            host, port = host.split(":")
            port = int(port)
        else:
            port = 443 if self.method == "CONNECT" else 22

        # Resolve domain to IP before connecting
        try:
            resolved_ip = socket.gethostbyname(host)
            print(f"Resolved {host} to {resolved_ip}")
            addr_info = socket.getaddrinfo(resolved_ip, port, socket.AF_UNSPEC, socket.SOCK_STREAM)
        except socket.gaierror:
            print(f"Failed to resolve {host}")
            return

        self.target = socket.socket(*addr_info[0][:3])
        self.targetClosed = False
        self.target.connect(addr_info[0][4])

    def method_CONNECT(self, path):
        possible_hosts = [path] if path else DEFAULT_HOSTS  # Use provided host or defaults
        last_error = None

        for host in possible_hosts:
            try:
                print(f"Trying to connect to {host}...")
                self.connect_target(host)  # Try to connect
                self.client.sendall(RESPONSE.encode())  # Send WebSocket response
                self.client_buffer = b''
                self.doCONNECT()
                return  # If successful, exit function
            except Exception as e:
                print(f"Connection to {host} failed: {e}")
                last_error = e
                continue  # Try the next host if one fails

        # If all attempts fail, send an error response
        self.client.send(b'HTTP/1.1 502 Bad Gateway\r\n\r\n')
        print(f"All connection attempts failed: {last_error}")

    def doCONNECT(self):
        socs = [self.client, self.target]
        count = 0
        error = False

        while not error:
            count += 1
            recv, _, err = select.select(socs, [], socs, 3)

            if err:
                error = True

            for in_ in recv:
                try:
                    data = in_.recv(BUFLEN)
                    if data:
                        if in_ is self.target:
                            self.client.send(data)
                        else:
                            while data:
                                sent = self.target.send(data)
                                data = data[sent:]
                        count = 0
                    else:
                        break
                except:
                    error = True
                    break

            if count == TIMEOUT:
                error = True


def main(host=IP, port=PORT):
    print("\033[0;34m━" * 8, "\033[1;32m PROXY SOCKS", "\033[0;34m━" * 8, "\n")
    print(f"\033[1;33mIP:\033[1;32m {IP}")
    print(f"\033[1;33mPORT:\033[1;32m {PORT}\n")
    print("\033[0;34m━" * 10, "\033[1;32m SSHPLUS", "\033[0;34m━\033[1;37m" * 11, "\n")

    server = Server(IP, PORT)
    server.start()

    try:
        while True:
            time.sleep(2)
    except KeyboardInterrupt:
        print("\nStopping...")
        server.close()


if __name__ == "__main__":
    main()
